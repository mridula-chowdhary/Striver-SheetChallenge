#include<bits/stdc++.h>
#include<vector>

void dfs(int node,vector<int>&vis,vector<int>adj[],stack<int>&st){
    vis[node]=1;
   for(auto it: adj[node]){
       if(!vis[it]){
           dfs(it,vis,adj,st);
       }
   }
   st.push(node);
}
void dfsF(int node,vector<int>&vis,vector<int>adjT[],vector<int>&temp){
    vis[node]=1;
    temp.push_back(node);
    for(auto it:adjT[node]){
        if(!vis[it]){
            dfsF(it,vis,adjT,temp);
        }
    }
}

vector<vector<int>> stronglyConnectedComponents(int n, vector<vector<int>> &edges)
{
      vector<int>adj[n+1],adjT[n+1];
        for(auto it:edges){
            adj[it[0]].push_back(it[1]);
        }
    vector<vector<int>>ans;
    //sort the edges acc to the finishing time
    vector<int>vis(n,0);
    stack<int>st;
    for(int i=0;i<n;i++){
        if(!vis[i]){
            dfs(i,vis,adj,st);
        }
    }
    //Transpose
     for(auto it:edges){

            adjT[it[1]].push_back(it[0]);

        }
    for(int i=0;i<n;i++)
    {
        vis[i]=0;
    }
    // dfs
    while(!st.empty()){
        int node= st.top();
        st.pop();
          vector<int>temp;
        if(!vis[node]){
            dfsF(node,vis,adjT,temp);
        }
        ans.push_back(temp);
    }
  return ans;
}
