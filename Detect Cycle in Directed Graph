#include <bits/stdc++.h>
bool dfs(int node,  vector<list<int>> &adj,int vis[],int pathVis[]){
  vis[node]=1;
  pathVis[node]=1;

  for(auto it: adj[node]){
    if(!vis[it]){
      if(dfs(it,adj,vis,pathVis)==true)
      return true;
    }
   else if(pathVis[it])
      return true;
   
  }
  pathVis[node]=0;
  return false;
}


int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) {
  vector<list<int>> adj(n+1);
  for(int i=0;i<edges.size();i++){
    int u = edges[i].first;
    int v = edges[i].second;
    adj[u].push_back(v);
  }
  int vis[n+1]={0};
  int pathVis[n+1]={0};
  for(int i=0;i<n;i++){
    if(!vis[i]){
     if( dfs(i,adj,vis,pathVis))
      return 1;
    }
  }
  return 0;
}
