#include<bits/stdc++.h>

int f(int ind, int n, int w, vector<int>&weights,vector<int>&values,
vector<vector<int>>&dp){
	if(ind==0){
		if(weights[0]<=w){
			return values[0];
		}
		else{
			return 0;
		}
		
	}
	if(dp[ind][w]!=-1){
		return dp[ind][w];
	}
		//not take
		int notTake= f(ind-1,n,w,weights,values,dp);
        // take
		int take= INT_MIN;
		if(weights[ind]<=w){
			take= values[ind]+f(ind-1,n,w-weights[ind],weights,values,dp);
		}
      return dp[ind][w]=max(take,notTake);
	
}

int maxProfit(vector<int> &values, vector<int> &weights, int n, int w)
{ 
	vector<vector<int>>dp(n,vector<int>(w+1,-1));
      return f(n-1,n ,w,weights, values,dp);	
}
