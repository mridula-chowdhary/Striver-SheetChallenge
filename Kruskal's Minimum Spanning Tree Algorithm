#include <bits/stdc++.h> 
class DisjointSet{
	vector<int>parent;
	vector<int>rank;
	vector<int>size;
public:
  DisjointSet(int n){
	 rank.resize(n+1,0);
	  size.resize(n+1);
	  parent.resize(n+1);
	  for(int i=0;i<=n;i++)
	  {
		  parent[i]=i;
	  }
  }
  int findUPr(int n){
	  if(n==parent[n]){
		  return n;
	  }
	  return parent[n]=findUPr(parent[n]);
  }
  void unionByRank(int u,int v){
	  int ulp_u=findUPr(u);
	  int ulp_v=findUPr(v);
	  if(ulp_u==ulp_v)
	   return;
	 else if(rank[ulp_u]<rank[ulp_v]){
		 parent [ulp_u]=ulp_v;
	  }
     else if(rank[ulp_u]>rank[ulp_v]) {
		 parent [ulp_v]=ulp_u;
	 }
	 else{
		 parent[ulp_v]=ulp_u;
		 rank[ulp_u]++;
	 }
  }
  void unionBySize(int u,int v){
	  int ulp_u=findUPr(u);
	  int ulp_v=findUPr(v);
       if(ulp_u==ulp_v)
	   return;
	 else if(size[ulp_u]>size[ulp_v]){
		  parent[v]=ulp_u;  
		  size[ulp_u]+=size[ulp_v];
	  }
	  else{
	  parent[ulp_u]=ulp_v;
      size[ulp_v]+=size[ulp_v];
	  }
  }

};

int kruskalMST(int n, int m, vector<vector<int>> &graph) {
	vector<pair<int,pair<int,int>>>adj;
	for(int i=0;i<m;i++){
		int u=graph[i][0];
		int v=graph[i][1];
		int wt= graph[i][2];
		adj.push_back({wt,{u,v}});
	}
	sort(adj.begin(),adj.end());
	DisjointSet ds(n);
	int mst=0;
	for(auto it:adj){
		int u=it.second.first;
		int v=it.second.second;
		int w=it.first;

		if(ds.findUPr(u)!=ds.findUPr(v)){
			mst+=w;
			ds.unionBySize(u,v);
		}
	}
return mst;

}
