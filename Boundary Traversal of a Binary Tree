#include <bits/stdc++.h> 
/************************************************************

    Following is the Binary Tree node structure:
    
    template <typename T>
    class TreeNode {
        public :
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~TreeNode() {
            if(left)
                delete left;
            if(right)
                delete right;
        }
    };

************************************************************/
bool leafNode(TreeNode<int>*root){
  TreeNode<int>*curr= root;
    return (!curr->left && !curr->right);
}
void leftTraversal(TreeNode<int>*root,vector<int>&ans){
  
    TreeNode<int>*curr=root;
    curr=curr->left;
    while (curr) {
      if (!leafNode(curr))
        ans.push_back(curr->data);
      if (!curr->left)
        curr = curr->right;
      else
        curr = curr->left;
    }
   
}
void leafTraversal(TreeNode<int>*root,vector<int>&ans){
      TreeNode<int>*curr= root;
      if (leafNode(curr)) {
        ans.push_back(curr->data);
        return;
      }
    if(curr->left) leafTraversal(curr->left,ans);
    if(curr->right)leafTraversal(curr->right,ans);

}
void rightTraversal(TreeNode<int>*root,vector<int>&ans){
      TreeNode<int>*curr= root;
      stack<int>s;
      curr= curr->right;
      while(curr){
          if(!leafNode(curr)) s.push(curr->data);
          if(!curr->right) curr= curr->left;
          else curr= curr->right;
      }
      while(!s.empty()){
          int val= s.top();
          s.pop();
          ans.push_back(val);
      }

}

vector<int> traverseBoundary(TreeNode<int>* root){
   vector<int>ans;
  if(!root)return ans;
 if(!leafNode(root))ans.push_back(root->data);
  leftTraversal(root,ans);
  leafTraversal(root,ans);
  rightTraversal(root,ans);
  return ans;

}
